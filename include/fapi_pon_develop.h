/*****************************************************************************
 *
 * Copyright (c) 2020 - 2024 MaxLinear, Inc.
 * Copyright (c) 2019 - 2020 Intel Corporation
 *
 * For licensing information, see the file 'LICENSE' in the root folder of
 * this software module.
 *
 *****************************************************************************/

/**
 *  \file
 *  This is the PON library header file, defining the API functions
 *  and data structures for debugging the PON IP module.
 */

#ifndef _FAPI_PON_DEVELOP_H_
#define _FAPI_PON_DEVELOP_H_

#include <stdbool.h>
#include "fapi_pon_gpon.h"

/** \addtogroup PON_FAPI_REFERENCE
 *   @{
 */

/** \defgroup PON_FAPI_REFERENCE_DEVELOP PON Library Development Functions
 *   This chapter describes the functional API interface to access
 *   functions that are used for development, debugging and testing.
 *
 *   Most of these functions require that the debug mode is enabled for the
 *   PON IP. Otherwise an error will be returned.
 *  @{
 */

/* Debug-specific enumerations */
/* ========================== */
/* Add Debug-specific enumerations here */

/* Debug structure definitions */
/* ========================== */
/* Add Debug-specific structures here.
 * \remark Debug functions are available only if the PON IP is enabled for debug
 * operation.
 */

/** Burst profile structure.
 *  This is used for 10G ITU PON modes only.
 *  Used by \ref fapi_pon_debug_burst_profile_get.
 */
struct pon_debug_burst_profile {
	/** Burst profile version.
	 *  Version values are valid in the range from 0 to 15.
	 */
	uint32_t version;
	/** Upstream FEC status.
	 *  - 0: DIS, Upstream FEC is disabled.
	 *  - 1: EN, Upstream FEC is enabled.
	 */
	uint32_t us_fec;
	/** Delimiter length (octets).
	 *  Values are valid in the range from 0 to 15.
	 */
	uint32_t delimiter_length;
	/** Delimiter pattern.
	 *  The first bit received in the PLOAM message is stored at the MSB
	 *  position, unused bits are padded with 0 towards the LSB.
	 */
	uint8_t delimiter_pattern[8];
	/** Preamble length (octets).
	 *  Values are valid in the range from 0 to 15.
	 */
	uint32_t preamble_length;
	/** Preamble repeat count.
	 *  Values are valid in the range from 0 to 255.
	 */
	uint32_t preamble_repeat_count;
	/** Preamble pattern.
	 *  The first bit received in the PLOAM message is stored at the MSB
	 *  position, unused bits are padded with 0 towards the LSB.
	 */
	uint8_t preamble_pattern[8];
	/** PON Tag. */
	uint8_t pon_tag[8];
};

/** GEM port and allocation limits structure.
 *  There are no individual minimum limits defined as these are all 0
 *  (no negative values are allowed).
 *  Used by \ref fapi_pon_limits_get.
 */
struct pon_range_limits {
	/** GEM port ID limit */
	uint32_t gem_port_id_max;
	/** GEM port index limit */
	uint32_t gem_port_idx_max;
	/** Allocation ID limit */
	uint32_t alloc_id_max;
	/** Allocation index limit */
	uint32_t alloc_idx_max;
};

/** Local wake-up parameters.
 *  Used by \ref fapi_pon_lwi_set and \ref fapi_pon_lwi_clear.
 */
struct pon_lwi {
	/** Local Wake-up Software Control.
	 *  This parameter is used to enable software control for the LWI.
	 *  - 0: LWI is controlled by hardware (default)
	 *  - 1: LWI is controlled by software
	 */
	uint32_t lwi_sw;
	/** Local Wake-up Indication.
	 *  This parameter controls the LWI status if software control is
	 *  enabled. If hardware control is used it reflects the status of
	 *  the hardware control pin.
	 *  - 0: LWI is off (no data is available for upstream transmission)
	 *  - 1: LWI is on (data is available for upstream transmission)
	 */
	uint32_t lwi;
};

/** PON data loop configuration parameters.
 *  Used by \ref fapi_pon_loop_cfg_set and \ref fapi_pon_loop_cfg_get.
 */
struct pon_loop_cfg {
	/** PMA ingress loop.
	 *  This loop is located at the WAN side of the PON IP, at the
	 *  "Physical Medium Attachment" (PMA).
	 *  The signal received from the SerDes in downstream direction is
	 *  sent back to the upstream. Any other upstream data received
	 *  from the LAN side or generated by the PLOAM state machine is
	 *  dropped.
	 *  Attention: This loop must never be activated while connected to
	 *  a life PON installation, it will disturb all other upstream
	 *  data traffic.
	 *  - 0: DIS, PMA ingress loop is disabled.
	 *  - 1: EN, PMA ingress loop is enabled.
	 */
	uint32_t pma_ingress;
	/** PMA egress loop.
	 *  This loop is located at the WAN side of the PON IP, at the
	 *  "Physical Medium Attachment" (PMA).
	 *  The signal to be transmitted to the SerDes in upstream
	 *  direction is sent back to the downstream while ignoring
	 *  the signal received by the downstream SerDes.
	 *  Attention: This loop will result in a downstream signal which
	 *  the GTX/XGTC framer can not synchronize to.
	 *  This loop is not available ITU PON applications.
	 *  - 0: DIS, PMA egress loop is disabled.
	 *  - 1: EN, PMA egress loop is enabled.
	 */
	uint32_t pma_egress;
	/** PCS egress loop.
	 *  This loop is located at the WAN side of the PON IP, at the
	 *  "Physical Coding Sublayer" (PCS).
	 *  The signal to be forwarded to the PMA in upstream direction is
	 *  sent back to the downstream while ignoring the signal received
	 *  by the PMA. This loop is not available for GPON applications.
	 *  - 0: DIS, PMA egress loop is disabled.
	 *  - 1: EN, PMA egress loop is enabled.
	 */
	uint32_t pcs_egress;
	/** MAC ingress loop.
	 *  This loop is located at the LAN side of the PON IP.
	 *  Ethernet data packets received on the LAN-side interface of the
	 *  PON IP module in upstream is returned back to the LAN side
	 *  (downstream).
	 *  The packet contents of a returned packet is not modified
	 *  (MAC source and destination addresses are not swapped).
	 *  - 0: DIS, LAN Ethernet ingress loop is disabled.
	 *  - 1: EN, LAN Ethernet ingress loop is enabled.
	 */
	uint32_t mac_ingress;
};

/** PON packet requesting configuration parameters.
 *  Used by \ref fapi_pon_req_cfg_set and \ref fapi_pon_req_cfg_get.
 */
struct pon_req_cfg {
	/** Requesting Activation
	 *
	 * This activates the requesting of packets by the PON IP.
	 * - 0: DIS Requesting is disabled.
	 * - 1: EN Requesting is enabled.
	 */
	uint32_t active;
};

/** Random number value size of 128-bit = 16 bytes */
#define PON_RAND_VAL_SIZE 16

/** Structure used to read a random number from the firmware.
 *  Used by \ref fapi_pon_debug_random_number_get.
 */
struct pon_debug_random_number {
	/** Type of random number.
	 *	- 0: KEY, Encryption key.
	 *	- 1: DELAY, Random delay value.
	 */
	int32_t type;
	/** 128-bit Random number value. */
	int8_t random_value[PON_RAND_VAL_SIZE];
};

/** Number of allocation discard counters. */
#define PON_ALLOC_DISC_COUNTERS 8
/** Number of allocation rule mismatch counters. */
#define PON_ALLOC_RULE_COUNTERS 17

/** Allocation discard counters.
 *  Used by \ref fapi_pon_alloc_discard_counters_get.
 *
 *  These are the individually counted discard reasons:
 *  - 0: DISC0, Number of skipped allocations due to bandwidth map burst
 *       errors.
 *  - 1: DISC1, Number of foreign allocations in the bandwidth map.
 *  - 2: DISC2, Number of own allocations in foreign bursts.
 *  - 3: DISC3, Number of foreign allocations in no bursts (default).
 *  - 4: DISC4, Number of foreign allocations as start of bursts
 *              (default2).
 *  - 5: DISC5, Number of bandwidth map HEC errors.
 *  - 6: DISC6, Number of times that more than 64 allocations have been
 *              received.
 *  - 7: DISC7, Number of HLend HEC errors.
 *  - Others: RES, Reserved for future extension.
 *
 *  These are the individually counted allocation rule violations:
 *  - 0: RULE0, Reserved.
 *  - 1: RULE1, Reserved.
 *  - 2: RULE2, Number of times that the spacing of adjacent bursts has
 *              been violated.
 *  - 3: RULE3, Reserved.
 *  - 4: RULE4, Number of times that the start time has exceeded a value of
 *              9719 maximum start time).
 *  - 5: RULE5, Reserved.
 *  - 6: RULE6, Number of times that the number of allocation structures
 *              has exceeded a value of 16 per single allocation.
 *  - 7: RULE7, Number of times that the number of allocation structures
 *              has exceeded a value of 64 for this ONU in total.
 *  - 8: RULE8, Number of times that the number of burst allocation series
 *              has exceeded a value of 16 for this ONU.
 *  - 9: RULE9, Number of times that the maximum grant size has been
 *              exceeded.
 *  - 10: RULE10, Number of times that the maximum FS burst size has been
 *                exceeded.
 *  - 11: RULE11, Number of times that the following rule has not been met:
 *                BurstStartTime + (sum of GrantSize) <= 14580.
 *  - 12: RULE12, Number of times that no allocations were found in the
 *                current frame after downstream time 13.168 us has
 *                passed and the downstream FIFO is still empty.
 *  - 13: RULE13, Number of times that the firmware unexpectedly missed to
 *                read all downstream allocations in time.
 *  - 14: RULE14, Number of times that the upstream allocation FIFO is not
 *                ready to receive the next burst.
 *  - 15: RULE15, Number of unknown profiles received.
 *  - 16: RULE16, Number of allocations successfully written into the
 *                upstream allocation FIFO.
 *  - Others: RES, Reserved for future extension.
 */
struct pon_alloc_discard_counters {
	/** This array holds the counters for discarded allocations. */
	uint64_t disc[PON_ALLOC_DISC_COUNTERS];
	/** This array holds the counters for allocation rule violations. */
	uint64_t rule[PON_ALLOC_RULE_COUNTERS];
};

/** PON direct register access parameters.
 *  Used by \ref fapi_pon_register_set and \ref fapi_pon_register_get.
 */
struct pon_register {
	/** Address. */
	uint32_t addr;
	/** Data. */
	uint32_t data;
};

/** Structure used to configure the debug trace function.
 *  Used by \ref fapi_pon_debug_trace_cfg_set and
 *  \ref fapi_pon_debug_trace_cfg_get.
 */
struct pon_debug_trace_cfg {
	/** Suppress trigger.
	 *  - 0: Trigger input is enabled
	 *  - 1: Trigger input is ignored (forced to 0). */
	int32_t suppress_trigger;
	/** Assume valid.
	 *  - 0: Valid input is used
	 *  - 1: Valid input is ignored. */
	int32_t assume_valid;
	/** Trigger source, selects which event shall trigger the trace.
	 *  - 0: NO, No trigger source is selected.
	 *  - 1: DSTIN, Downstream timer input.
	 *  - 2: DSTOUT, Downstream timer output.
	 *  - 3: DSCR, Downstream descrambler output.
	 *  - 4: FEC, Downstream FEC decoder output.
	 *  - 5: FSPARSER, Downstream FS header/trailer parser.
	 *  - 6: GEMPARSER, Downstream GEM header parser.
	 *  - 7: AES, Downstream AES decryption output.
	 *  - 8: USCTRL, Upstream control output.
	 *  - 9: USENC, Upstream encryption output.
	 *  - 10: FSBURST, Upstream FS burst output.
	 *  - 11: USFEC, Upstream FEC encoder output.
	 *  - 12: SCR, Upstream scrambler output.
	 *  - 13: PSBU, Upstream PSBu output.
	 *  - 14: USOUT, Upstream output.
	 */
	int32_t trigger_source;
	/** Number of samples to be captured.
	 *  The value must be between 0 and 16383.
	 */
	int32_t samples;
	/** Number of ignored triggers. */
	int32_t trigger_ignore;
	/** Trigger shift samples. */
	int32_t trigger_shift;
};

/** Structure used to configure the debug trace function.
 *  Used by \ref fapi_pon_debug_trace_status_get.
 */
struct pon_debug_trace_status {
	/** Trigger sample address.
	 *  Shows the memory address of the sample captured when/after
	 *  the trigger occurred.
	 */
	int32_t address;
	/** Total number of acquired samples.
	 *  Shows the number of samples arrived during the entire trace.
	 *  This value increases each time a sample is stored.
	 */
	int32_t sample_cnt;
	/** Total number of triggers.
	 *  Shows the number of triggers arrived during the entire trace.
	 *  This value increases each time a trigger is detected.
	 */
	int32_t trigger_cnt;
};

/** Structure used to read the debug trace run status.
 *  Used by \ref fapi_pon_debug_trace_run_status_get.
 */
struct pon_debug_trace_run_status {
	/** Run indication. */
	int32_t run;
	/** Done indication. */
	int32_t done;
};

/** XGEM key configuration.
 *  Used by \ref fapi_pon_xgem_key_cfg_set.
 */
struct pon_xgem_key {
	/** XGEM key index. Only the values 0 to 3 are valid.
	 *  - 0: UC1, Unicast key, index 1
	 *  - 1: UC2, Unicast key, index 2
	 *  - 2: BC1, Broadcast key, index 1
	 *  - 3: BC2, Broadcast key, index 2
	 */
	uint32_t index;
	/** XGEM key size, given in multiples of 32 bit.
	 *  Valid from 4 (128 bit) to MAXIMUM_XGEM_KEY_SIZE_BY_4.
	 */
	uint32_t size;
	/** XGEM key. Any binary value up to the maximum size is valid. */
	uint32_t key[PON_MAXIMUM_XGEM_KEY_SIZE_BY_4];
};

/** Structure used to configure the PLOAM state machine debug break point
 *  function. Used by \ref fapi_pon_debug_ploam_cfg_set and
 *  \ref fapi_pon_debug_ploam_cfg_get.
 */
struct pon_debug_ploam_cfg {
	/** Enable the PLOAM state break point.
	 *  - 0: Disabled, The PLOAM state machine is in normal operation mode
	 *       (default).
	 *  - 1: Enabled, The selected PLOAM state is frozen, once it is
	 *       reached.
	 */
	int32_t break_enable;
	/** PLOAM state to be frozen.
	 *  The PLOAM state value is coded by two-digit decimal numbers, the
	 *  first defining the main state while the second selects the
	 *  sub-state. If a main state does not have sub-states, the second
	 *  digit is set to 0.
	 */
	int32_t ploam_state;
	/** PLOAM state enforcing.
	 *  This allows to force the PLOAM state machine into the selected state
	 *  immediately.
	 *  - 0: None, The selected PLOAM state is not forced.
	 *  - 1: Forced, The selected PLOAM state is forced.
	 */
	bool force_enable;
};

/** Structure used to read the selected PLOAM state breakpoints back.
 *  Used by \ref fapi_pon_debug_ploam_cfg_get.
 */
struct pon_debug_ploam_cfg_status {
		/** The selected PLOAM state breakpoints are returned
		 *  as a bit mask where a set bit indicates a set breakpoint.
		 *  The bitmap has the following structure:
		 *  - Bit  0: O0
		 *  - Bit  1: O1
		 *  - Bit  2: O1.1
		 *  - Bit  3: O1.2
		 *  - Bit  4: O2
		 *  - Bit  5: O2-3
		 *  - Bit  6: O3
		 *  - Bit  7: O4
		 *  - Bit  8: O5
		 *  - Bit  9: O5.1
		 *  - Bit 10: O5.2
		 *  - Bit 11: O6
		 *  - Bit 12: O7
		 *  - Bit 13: O7.1
		 *  - Bit 14: O7.2
		 *  - Bit 15: O8.1
		 *  - Bit 16: O8.2
		 *  - Bit 17: O9
		 */
	int32_t ploam_breakpoints;
};

/** SerDes test mode types */
enum serdes_test_mode {
	/** Receive path test pattern check. */
	SERDES_TEST_MODE_RX = 1,
	/** Test pattern generation with loop timing. */
	SERDES_TEST_MODE_TX_LOOP_TIMED = 2,
	/** Test pattern generation with local timing. */
	SERDES_TEST_MODE_TX_LOCAL_TIMED = 3,
	/** Test pattern generation and check with loop timing. */
	SERDES_TEST_MODE_TX_RX = 4,
	/** The test pattern transmission and reception are switched on,
	 *  the transmitter is looped back to the receiver internally.
	 */
	SERDES_TEST_MODE_TX_TO_RX_LOOP = 5,
	/** Remote loopback.
	 *  Received data is looped back to the transmit path within
	 *  the PMA/SerDes (the loop PLL is bypassed).
	 */
	SERDES_TEST_MODE_RX_TO_TX_LOOP_PMD = 6,
	/** Received data is looped back to the transmit path
	 *  within the PON TC layer (the loop PLL is enabled).
	 */
	SERDES_TEST_MODE_RX_TO_TX_LOOP_PON = 7,
	__SERDES_TEST_MODE_MAX,
};

/** SerDes test pattern mode types
 *  \remark The value 0 is reserved and must not be used.
 */
enum test_pattern_type {
	/** PRBS pattern X^31 + X^28 + 1 (default) */
	TP_MODE_PRBS31_28 = 1,
	/** PRBS pattern X^23 + X^18 + 1 */
	TP_MODE_PRBS23_18 = 2,
	/** PRBS pattern X^23 + X^21 + X^16 + X^8 + X^5 + X^2 + 1 */
	TP_MODE_PRBS23_21 = 3,
	/** PRBS pattern X^16 + X^5 + X^4 + X^3 + 1 */
	TP_MODE_PRBS16 = 4,
	/** PRBS pattern X^15 + X^14 + 1 */
	TP_MODE_PRBS15 = 5,
	/** PRBS pattern X^11 + X^9 + 1 */
	TP_MODE_PRBS11 = 6,
	/** PRBS pattern X^9 + X^5 + 1 */
	TP_MODE_PRBS9 = 7,
	/** PRBS pattern X^7 + X^6 + 1 */
	TP_MODE_PRBS7 = 8,
	/** Repeated fixed pattern as defined by the "pattern" */
	TP_MODE_PAT = 9,
	/** DC-balanced fixed pattern based on "pattern"
	 *  (alternating normal and inverted pattern)
	 */
	TP_MODE_PAT_DCBAL = 10,
	/** Repeated mixed fixed pattern constructed from 0x000 - pattern -
	 *  0x3FF - ~pattern
	 */
	TP_MODE_PAT_FIX = 11,
	__TP_MODE_MAX,
};

/** Minimum value of PRBS test pattern mode */
#define PRBS_TP_MODE_MIN TP_MODE_PRBS31_28
/** Maximum value of PRBS test pattern mode */
#define PRBS_TP_MODE_MAX (__TP_MODE_MAX - 1)

/** PON IP serial number structure.
 *  Used by \ref fapi_pon_serial_number_get.
 */
struct pon_serial_number {
	/** Serial number. */
	uint8_t serial_no[PON_SERIAL_NO_SIZE];
};

/** PON IP Registration ID structure.
 *  Used by \ref fapi_pon_registration_id_get.
 */
struct pon_registration_id {
	/** Registration ID. */
	uint8_t reg_id[36];
};

/** PON IP ITU-T G.984 mode password structure.
 *  Used by \ref fapi_pon_password_get.
 */
struct pon_password {
	/** Password. */
	uint8_t password[10];
};

/** This structure provides the number of bit errors which have been counted
 * during the reported time interval. Used by \ref fapi_pon_serdes_biterr_stop
 * and \ref fapi_pon_serdes_biterr_read.
 */
struct pon_biterr_status {
	/** Counter value */
	uint64_t counter;
	/** Time period since start in ms */
	uint32_t period_ms;
	/** Status of the counter */
	uint8_t counter_running;
};

/** Structure used to define a debug test pattern to be applied to the SerDes.
 *  Used by \ref fapi_pon_debug_test_pattern_cfg_set and
 *  \ref fapi_pon_debug_test_pattern_cfg_get.
 */
struct pon_debug_test_pattern {
	/** Test pattern type selection for transmit direction. */
	enum test_pattern_type tx_type;
	/** Test pattern type selection for receive direction. */
	enum test_pattern_type rx_type;
	/** Fixed 8-bit pattern for transmission.
	 *  Applicable only if a fixed test pattern is selected.
	 *  Set to 0 otherwise.
	 *
	 *  An error shall be reported if the pattern is set to all-zero (0) or
	 *  all-ones (255) in either of the test pattern types TP_MOD_PAT,
	 *  TP_MODE_PAT_DCBAL, or TP_MODE_PAT_FIX.
	 *
	 *  The configuration applies to the transmit direction only.
	 *
	 *  The receive direction does not need a configuration,
	 *  the pattern is detected automatically.
	 */
	uint8_t pattern;
	/** Receive test pattern inversion.
	 *  - 0: NORM, The received test pattern is not inverted.
	 *  - 1: INV, The received test pattern is inverted.
	 */
	int8_t rx_inv;
	/** Transmit test pattern inversion.
	 *  - 0: NORM, The transmitted test pattern is not inverted.
	 *  - 1: INV, The transmitted test pattern is inverted.
	 */
	int8_t tx_inv;
};

/** Structure used to read the debug test pattern status.
 *  Used by \ref fapi_pon_debug_test_pattern_status_get.
 */
struct pon_debug_test_pattern_status {
	/** Test mode
	 *  - 0: OFF, No test mode is enabled.
	 *  - 1: RX, Receive path test pattern check.
	 *  - 2: TX_LOOP_TIMED, Test pattern generation with loop timing.
	 *  - 3: TX_LOCAL_TIMED, Test pattern generation with local timing.
	 *  - 4: TX_RX, Test pattern generation and check with loop timing.
	 *  - 5: TX_TO_RX_LOOP, Test pattern transmission and reception.
	 *  - 6: RX_TO_TX_LOOP_PON, Received data is looped back to the transmit
	 *       path within the PON TC layer (the loop PLL is enabled).
	 *  - 7: RX_TO_TX_LOOP_PMD, Remote loopback.
	 *       Received data is looped back to the transmit path within
	 *       the PMA/SerDes (the loop PLL is bypassed).
	 */
	enum serdes_test_mode test_mode;
	/** Test enable status
	 *  - 0: DIS, Disabled
	 *  - 1: EN, Enabled
	 */
	uint8_t counting;
};

/* PON library debug function definitions */
/* ====================================== */

/**
 *	Read the 10G ITU PON burst profile configuration.
 *	This function is not available in ITU-T G.984 (GPON) operation mode.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] index Burst profile index
 *	\param[in] us_rate Upstream data rate (0 = slow, 1 = fast)
 *	\param[in] dwlch_id Downstream wavelength channel ID
 *	This shall be set to 0 if only a single wavelength is
 *	supported by the active operation mode.
 *	\param[out] param Pointer to a structure as defined
 *	by \ref pon_debug_burst_profile.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
	fapi_pon_debug_burst_profile_get(struct pon_ctx *ctx,
					 uint32_t index,
					 uint32_t us_rate,
					 uint32_t dwlch_id,
					 struct pon_debug_burst_profile *param);

/**
 *	Configure a test loop.
 *	Attention: The WAN-side loop must never be activated if an OLT is
 *	connected to the fiber. This would break the traffic to all other ONUs
 *	on the same optical fiber branch (ODN).
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] param Pointer to a structure as defined
 *	by \ref pon_loop_cfg.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_loop_cfg_set(struct pon_ctx *ctx,
					const struct pon_loop_cfg *param);

/**
 *	Read the test loop configuration.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[out] param Pointer to a structure as defined
 *	by \ref pon_loop_cfg.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_loop_cfg_get(struct pon_ctx *ctx,
					      struct pon_loop_cfg *param);

/**
 *	Start the rogue ONU debug testing.
 *	This will set the ONU into a rogue state by sending light outside the
 *	assigned time slots.
 *
 *	This can be terminated by using the \ref fapi_pon_debug_rogue_stop
 *	command.
 *
 *	It is also automatically terminated by reception of a serial number
 *	disable PLOAM downstream message or by a PON IP module reset.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open,
 *	or NULL to implicitly create one for this function call.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_debug_rogue_start(struct pon_ctx *ctx);

/**
 *	Stop rogue ONU debug testing.
 *	This will reset the ONU into normal operation state after having been
 *	set into rogue ONU state by using \ref fapi_pon_debug_rogue_start.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open,
 *	or NULL to implicitly create one for this function call.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_debug_rogue_stop(struct pon_ctx *ctx);

/**
 *	Trigger the internal rogue ONU detection for testing.
 *	This will simulate an internally detected rogue ONU status.
 *
 *	As a result the PLOAM state is expected to move to O7 (emergency stop)
 *	and the optical transmitter is disabled until it is re-enabled
 *	by the OLT.
 *
 *	This text function can be disabled by calling
 *	\ref fapi_pon_debug_rogue_internal_stop.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open,
 *	or NULL to implicitly create one for this function call.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
	fapi_pon_debug_rogue_internal_start(struct pon_ctx *ctx);

/**
 *	Stop internal rogue ONU detection testing.
 *	This will reset the ONU into normal operation state after having been
 *	set into rogue ONU state by using
 *	\ref fapi_pon_debug_rogue_internal_start.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open,
 *	or NULL to implicitly create one for this function call.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_debug_rogue_internal_stop(struct pon_ctx *ctx);

/**
 *	Configure the upstream data requesting.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] param Pointer to a structure as defined
 *	by \ref pon_req_cfg.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_req_cfg_set(struct pon_ctx *ctx,
					     const struct pon_req_cfg *param);

/**
 *	Read the test data requesting configuration.
 *	This shows the configuration of the data requesting.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[out] param Pointer to a structure as defined
 *	by \ref pon_req_cfg.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_req_cfg_get(struct pon_ctx *ctx,
					     struct pon_req_cfg *param);

/**
 *	Read allocation-specific counter values.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[out] param Pointer to a structure as defined
 *	by \ref pon_alloc_discard_counters.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_alloc_discard_counters_get(struct pon_ctx *ctx,
				struct pon_alloc_discard_counters *param);

/**
 *	Function to read the allocation ID of an upstream
 *	time slot allocation (T-CONT) for a given allocation index.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] alloc_index The allocation index for which the ID
 *	shall be returned.
 *	\param[out] param_out Pointer to a structure as defined by
 *	\ref pon_allocation_id to return the requested allocation ID.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: Allocation ID successfully configured.
 *	- PON_STATUS_VALUE_RANGE_ERR: Allocation index is invalid.
 *	- PON_STATUS_ALLOC_ID_NOT_EXISTS_ERR: The allocation index is not
 *	in use.
 */
enum fapi_pon_errorcode
	fapi_pon_alloc_index_get(struct pon_ctx *ctx,
				 uint8_t alloc_index,
				 struct pon_allocation_id *param_out);

/**
 *	Write to a PON IP hardware register.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] param Pointer to a structure as defined
 *	by \ref pon_register.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_register_set(struct pon_ctx *ctx,
					const struct pon_register *param);

/**
 *	Read from a PON IP hardware register.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] dst_addr Register address to be read from.
 *	\param[out] param Pointer to a structure as defined
 *	by \ref pon_register.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_register_get(struct pon_ctx *ctx,
					      uint32_t dst_addr,
					      struct pon_register *param);

/**
 *	Assign allocation without an OLT.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] alloc_id Allocation ID value.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_debug_alloc_assign(struct pon_ctx *ctx,
						    uint16_t alloc_id);

/**
 *	Deassign allocation without an OLT.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] alloc_id Allocation ID value.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_debug_alloc_deassign(struct pon_ctx *ctx,
						      uint16_t alloc_id);

/**
 *	Set the debug trace configuration.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] param Pointer to a structure as defined
 *	by \ref pon_debug_trace_cfg.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
	fapi_pon_debug_trace_cfg_set(struct pon_ctx *ctx,
				     const struct pon_debug_trace_cfg *param);

/**
 *	Read the debug trace configuration.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] param Pointer to a structure as defined
 *	by \ref pon_debug_trace_cfg.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
	fapi_pon_debug_trace_cfg_get(struct pon_ctx *ctx,
				     struct pon_debug_trace_cfg *param);

/**
 *	Read the debug trace result.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] param Pointer to a structure as defined
 *	by \ref pon_debug_trace_status.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
	fapi_pon_debug_trace_status_get(struct pon_ctx *ctx,
					struct pon_debug_trace_status *param);

/**
 *	Start a debug trace.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_debug_trace_start(struct pon_ctx *ctx);

/**
 *	Stop a debug trace.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_debug_trace_stop(struct pon_ctx *ctx);

/**
 *	Read the debug trace run status.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] param Pointer to a structure as defined
 *	by \ref pon_debug_trace_run_status.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
	fapi_pon_debug_trace_run_status_get(struct pon_ctx *ctx,
				struct pon_debug_trace_run_status *param);

/**
 *	Read a random number back from the firmware.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] type Random number type to be read,
 *		either a key (0) or a delay (1).
 *	\param[out] param Pointer to a structure as defined
 *	by \ref pon_debug_random_number.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
	fapi_pon_debug_random_number_get(struct pon_ctx *ctx,
					 uint32_t type,
					 struct pon_debug_random_number *param);

/**
 *	Set the XGEM encryption/decryption key value.
 *	This function is used for interoperability testing to provide
 *	a well-known key value. There is no inverse "_cfg_get" function as this
 *	would impact the system security. Using this function in a productive
 *	system will invalidate the key which has been negotiated with the OLT
 *	and thus break the data connection.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] param Pointer to a structure as defined
 *		by \ref pon_xgem_key.
 *
 *	\remarks The function returns an error code in case of error.
 *		The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error
 *		(invalid key index, invalid key size).
 */
enum fapi_pon_errorcode fapi_pon_xgem_key_cfg_set(struct pon_ctx *ctx,
					const struct pon_xgem_key *param);

/**
 *	Get range limits for GEM ports and allocations.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] param Pointer to a structure as defined
 *		by \ref pon_range_limits.
 *
 *	\remarks The function returns an error code in case of error.
 *		The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_limits_get(struct pon_ctx *ctx,
					    struct pon_range_limits *param);

/**
 *	Enable the test function for local wake-up control.
 *	The power save state machine (PSM) reacts to local traffic which is
 *	waiting to be sent upstream. There is a Local Wake-up Indication (LWI)
 *	signal generated by the hardware to inform the state machine.
 *
 *	For interoperability testing this signal needs to be triggered manually.
 *	This function enables manual LWI trigger and disables the automatic
 *	mode.
 *
 *	To disable the test function use \ref fapi_pon_lwi_test_disable.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_lwi_test_enable(struct pon_ctx *ctx);

/**
 *	Disable the test function for local wake-up control
 *	(see \ref fapi_pon_lwi_test_enable for more details).
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_lwi_test_disable(struct pon_ctx *ctx);

/**
 *	Set the Local Wake-up Indication (LWI) if the test function is enabled
 *	through \ref fapi_pon_lwi_test_enable.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_lwi_set(struct pon_ctx *ctx);

/**
 *	Clear the Local Wake-up Indication (LWI) if the test function is enabled
 *	through \ref fapi_pon_lwi_test_enable.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_lwi_clear(struct pon_ctx *ctx);

/**
 *	Set the PON debug level.
 *
 *	\param[in] level PON debug level to be applied.
 *		- 0: MSG, Message logging level
 *		- 1: PRN, Print logging level
 *		- 2: WRN, Warnings logging level
 *		- 3: ERR, Error logging level
 *		- 4: OFF, No debug logging
 */
#ifndef SWIG
void fapi_pon_dbg_level_set(const uint8_t level);
#endif

/**
 *	Get the PON debug level.
 *
 *	Returns the PON debug level which is active.
 *	- 0: MSG, Message logging level
 *	- 1: PRN, Print logging level
 *	- 2: WRN, Warnings logging level
 *	- 3: ERR, Error logging level
 *	- 4: OFF, No debug logging
 */
#ifndef SWIG
uint8_t fapi_pon_dbg_level_get(void);
#endif

/**
 *	Set the PLOAM state machine debug break point configuration.
 *	A single PLOAM state can be selected to hold the state machine in this
 *	state, once it is reached. Commencing to another state is inhibited as
 *	long as the break function is enabled.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] param Pointer to a structure as defined
 *	by \ref pon_debug_ploam_cfg.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_debug_ploam_cfg_set(struct pon_ctx *ctx,
				const struct pon_debug_ploam_cfg *param);

/**
 *	Read the PLOAM state machine debug break point configuration.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] param Pointer to a structure as defined
 *	by \ref pon_debug_ploam_cfg_status.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_debug_ploam_cfg_get(struct pon_ctx *ctx,
				struct pon_debug_ploam_cfg_status *param);

/**
 *	Trigger the O5 state for testing. As a result the PLOAM state is
 *	expected to move to O5 (operational).
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open,
 *	or NULL to implicitly create one for this function call.
 *	\param[in] onu_id ONU ID to use
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_debug_operational_enter(struct pon_ctx *ctx,
							 uint32_t onu_id);

/**
 *	Assign allocation ID and GEM port index required for OMCI communication
 *
 *	This has to be called:
 *	- after \ref fapi_pon_debug_operational_enter
 *	- after the creation of the OMCI GEM port
 *	- before any of non-OMCI GEM ports are created
 *
 *	This is needed to reserve the GEM port index 0 for the OMCI GEM port,
 *	to prevent the GEM port index 0 from being assigned to non-OMCI GEM
 *	ports.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open,
 *	or NULL to implicitly create one for this function call.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_debug_create_omcc(struct pon_ctx *ctx);

/**
 *	Function to read the PON IP serial number from non-volatile memory.
 *	This number cannot be changed through the PON library.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[out] param Pointer to a structure as defined
 *	by \ref pon_serial_number.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_serial_number_get(struct pon_ctx *ctx,
					struct pon_serial_number *param);

/**
 *	Function to read the PON IP registration ID from non-volatile memory.
 *	This number cannot be changed through the PON library.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[out] param Pointer to a structure as defined
 *	by \ref pon_registration_id.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_registration_id_get(struct pon_ctx *ctx,
					struct pon_registration_id *param);

/**
 *	Function to read the password from the firmware in G.984 operation mode.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[out] param Pointer to a structure as defined
 *	by \ref pon_password.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_password_get(struct pon_ctx *ctx,
					      struct pon_password *param);

/**
 *	Trigger a PON IP alarm.
 *	One firmware alarm event can be	requested through this function.
 *	Once the function is called, the requested alarm event is either set
 *	or cleared (for level alarms) or sent once for edge type alarms.
 *	Clearing an edge type alarm has no effect.
 *
 *	This function is intended to support debugging of the event handling.
 *
 *	\param[in] ctx PON FAPI context created by \ref fapi_pon_open.
 *	\param[in] pon_alarm_id Alarm ID.
 *	\param[in] mode Alarm mode (1: static or 0: edge).
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
	fapi_pon_alarm_status_set(struct pon_ctx *ctx,
				  uint16_t pon_alarm_id,
				  int mode);

/**
 *	Start the SerDes bit error counter polling.
 *	This will start a kernel thread to accumulate the counter values from
 *	the SerDes to avoid an overflow, which can happen every 419 ms in the
 *	worst case (at a bit error rate of 10e-3 and 10G data rate).
 *
 *	The kernel thread can be terminated by using the
 *	\ref fapi_pon_serdes_biterr_stop command.
 *
 *	On start the counter will be reset to 0 and the current time will be
 *	stored as reference. It can be called again to reset the current values
 *	again to this.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open,
 *	or NULL to implicitly create one for this function call.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_serdes_biterr_start(struct pon_ctx *ctx);

/**
 *	Stop the SerDes bit error counter polling.
 *	This will stop the kernel thread started by
 *	\ref fapi_pon_serdes_biterr_start and return the last counter and time
 *	since start.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[out] param Pointer to a structure as defined
 *	by \ref pon_biterr_status.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
fapi_pon_serdes_biterr_stop(struct pon_ctx *ctx,
			    struct pon_biterr_status *param);

/**
 *	Read the current SerDes bit error counter.
 *	This will return the accumulated counter and time since
 *	\ref fapi_pon_serdes_biterr_start was called.
 *
 *	After stopping the kernel thread by \ref fapi_pon_serdes_biterr_stop
 *	this function still returns the last values from the polling.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[out] param Pointer to a structure as defined
 *	by \ref pon_biterr_status.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
fapi_pon_serdes_biterr_read(struct pon_ctx *ctx,
			    struct pon_biterr_status *param);

/**
 *	Enable the selected SerDes test function for sending and/or receiving a
 *	data pattern to/from the PON network.
 *
 *	This function sets the PON SerDes into a test mode which transmits
 *	and/or receives a fixed or pseudo random test pattern for optical
 *	interface measurements and calibration. It also provides loop functions.
 *
 *	The pattern to be sent and/or received must be selected in advance by
 *	using \ref fapi_pon_debug_test_pattern_cfg_set.
 *
 *	To disable the test function use
 *	\ref fapi_pon_debug_test_pattern_disable.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] test_mode SerDes test mode selection.
 *	\param[in] wl_ch_id Wavelength channel id.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- PON_STATUS_INPUT_ERR: If the test mode and pattern has not been set
 *				correctly in advance.
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
fapi_pon_debug_test_pattern_enable(struct pon_ctx *ctx,
				   enum serdes_test_mode test_mode,
				   uint8_t wl_ch_id);

/**
 *	Disable the test function for sending a data pattern in upstream
 *	direction.
 *
 *	To configure the test function use
 *	\ref fapi_pon_debug_test_pattern_cfg_set.
 *	To enable the test function use \ref fapi_pon_debug_test_pattern_enable.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
fapi_pon_debug_test_pattern_disable(struct pon_ctx *ctx);

/**
 *	Deprecated function, shall not be used for new implementations.
 *
 *	Define the test pattern configuration for sending and/or receiving a
 *	data pattern in upstream and/or downstream direction.
 *
 *	This function defines the data pattern which is sent and/or received by
 *	the PON SerDes during test mode operation. To start operation call
 *	\ref fapi_pon_debug_test_pattern_enable.
 *
 *	It is possible to change the pattern type while a test mode is active.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[in] param Test pattern operation mode as defined
 *		by \ref pon_debug_test_pattern.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
#ifndef SWIG
enum fapi_pon_errorcode
fapi_pon_debug_test_pattern_cfg_set(struct pon_ctx *ctx,
				    const struct pon_debug_test_pattern *param);
#endif

/**
 *	Deprecated function, shall not be used for new implementations.
 *
 *	Read the test pattern and mode configuration for sending and/or
 *	receiving a data pattern in upstream and/or downstream direction.
 *
 *	This function reads the data pattern and mode which is sent and/or
 *	received by the PON SerDes during test mode operation after
 *	\ref fapi_pon_debug_test_pattern_enable has been called.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[out] param Test pattern operation mode as defined
 *		by \ref pon_debug_test_pattern.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
#ifndef SWIG
enum fapi_pon_errorcode
fapi_pon_debug_test_pattern_cfg_get(struct pon_ctx *ctx,
				    struct pon_debug_test_pattern *param);
#endif

/**
 *	Read the test pattern debug mode status.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *	\param[out] param Pointer to a structure as defined
 *	by \ref pon_debug_test_pattern_status.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode
fapi_pon_debug_test_pattern_status_get(struct pon_ctx *ctx,
				   struct pon_debug_test_pattern_status *param);

/**
 *	Insert a single bit error into the transmitted test pattern.
 *
 *	This function inserts a single bit error into the transmitted test
 *	pattern which has been defined by
 *	\ref fapi_pon_debug_test_pattern_cfg_set and started by calling the
 *	\ref fapi_pon_debug_test_pattern_enable or this function.
 *
 *	This function has no effect if the test pattern transmitter has not
 *	been started.
 *
 *	\param[in] ctx PON library context created by \ref fapi_pon_open.
 *
 *	\remarks The function returns an error code in case of error.
 *	The error code is described in \ref fapi_pon_errorcode.
 *
 *	\return Return value as follows:
 *	- PON_STATUS_OK: If successful
 *	- PON_STATUS_TEST_PATTERN_INACTIVE: If the test pattern generator is
 *								       inactive.
 *	- Other: An error code in case of error.
 */
enum fapi_pon_errorcode fapi_pon_debug_bit_error_set(struct pon_ctx *ctx);

/* Add more debug function here */

/*! @} */ /* End of PON library debug functions */

/*! @} */ /* End of PON library definitions */

#endif /* _FAPI_PON_DEBUG_H_ */
